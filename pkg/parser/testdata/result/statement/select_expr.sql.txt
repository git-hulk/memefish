--- select_expr.sql
select 1 + 2, 1 - 2,
       1 * 2, 2 / 2,
       +1++1, -1+-1,
       +1.2, -3.4,
       ~1 ^ ~1,
       1 ^ 2, 2 & 1, 2 | 1,
       1 << 2, 2 >> 1,
       foo.bar * +foo.bar * -foo.bar,
       (select 1 `1`).1,
       NOT NOT true,
       [1, 2, 3][offset(1)],
       [1, 2, 3][`offset`(1)],
       [1, 2, 3][ordinal(1)],
       case
       when 1 = 1 then "1 = 1"
       else            "else"
       end,
       case 1
       when 1 then "1"
       when 2 then "2"
       else        "other"
       end,
       IF(1 < 2, 'true', 'false') AS result,
       date_add(date "2019-09-01", interval 5 day),
       timestamp_add(timestamp "2019-09-01 08:11:22", interval 5 hour),
       1 in (1, 2, 3),
       2 in unnest([1, 2, 3]),
       3 in (select 1 union all select 2 union all select 3),
       [1] || [2]

--- AST
&ast.QueryStatement{
  Hint:  (*ast.Hint)(nil),
  With:  (*ast.With)(nil),
  Query: &ast.Select{
    Select:   0,
    Distinct: false,
    AsStruct: false,
    Results:  []ast.SelectItem{
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "+",
          Left: &ast.IntLiteral{
            ValuePos: 7,
            ValueEnd: 8,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 11,
            ValueEnd: 12,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "-",
          Left: &ast.IntLiteral{
            ValuePos: 14,
            ValueEnd: 15,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 18,
            ValueEnd: 19,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "*",
          Left: &ast.IntLiteral{
            ValuePos: 28,
            ValueEnd: 29,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 32,
            ValueEnd: 33,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "/",
          Left: &ast.IntLiteral{
            ValuePos: 35,
            ValueEnd: 36,
            Base:     10,
            Value:    "2",
          },
          Right: &ast.IntLiteral{
            ValuePos: 39,
            ValueEnd: 40,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "+",
          Left: &ast.IntLiteral{
            ValuePos: 49,
            ValueEnd: 51,
            Base:     10,
            Value:    "+1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 52,
            ValueEnd: 54,
            Base:     10,
            Value:    "+1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "+",
          Left: &ast.IntLiteral{
            ValuePos: 56,
            ValueEnd: 58,
            Base:     10,
            Value:    "-1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 59,
            ValueEnd: 61,
            Base:     10,
            Value:    "-1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.FloatLiteral{
          ValuePos: 70,
          ValueEnd: 74,
          Value:    "+1.2",
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.FloatLiteral{
          ValuePos: 76,
          ValueEnd: 80,
          Value:    "-3.4",
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "^",
          Left: &ast.UnaryExpr{
            OpPos: 89,
            Op:    "~",
            Expr:  &ast.IntLiteral{
              ValuePos: 90,
              ValueEnd: 91,
              Base:     10,
              Value:    "1",
            },
          },
          Right: &ast.UnaryExpr{
            OpPos: 94,
            Op:    "~",
            Expr:  &ast.IntLiteral{
              ValuePos: 95,
              ValueEnd: 96,
              Base:     10,
              Value:    "1",
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "^",
          Left: &ast.IntLiteral{
            ValuePos: 105,
            ValueEnd: 106,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 109,
            ValueEnd: 110,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "&",
          Left: &ast.IntLiteral{
            ValuePos: 112,
            ValueEnd: 113,
            Base:     10,
            Value:    "2",
          },
          Right: &ast.IntLiteral{
            ValuePos: 116,
            ValueEnd: 117,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "|",
          Left: &ast.IntLiteral{
            ValuePos: 119,
            ValueEnd: 120,
            Base:     10,
            Value:    "2",
          },
          Right: &ast.IntLiteral{
            ValuePos: 123,
            ValueEnd: 124,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "<<",
          Left: &ast.IntLiteral{
            ValuePos: 133,
            ValueEnd: 134,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.IntLiteral{
            ValuePos: 138,
            ValueEnd: 139,
            Base:     10,
            Value:    "2",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   ">>",
          Left: &ast.IntLiteral{
            ValuePos: 141,
            ValueEnd: 142,
            Base:     10,
            Value:    "2",
          },
          Right: &ast.IntLiteral{
            ValuePos: 146,
            ValueEnd: 147,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "*",
          Left: &ast.BinaryExpr{
            Op:   "*",
            Left: &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 156,
                  NameEnd: 159,
                  Name:    "foo",
                },
                &ast.Ident{
                  NamePos: 160,
                  NameEnd: 163,
                  Name:    "bar",
                },
              },
            },
            Right: &ast.UnaryExpr{
              OpPos: 166,
              Op:    "+",
              Expr:  &ast.Path{
                Idents: []*ast.Ident{
                  &ast.Ident{
                    NamePos: 167,
                    NameEnd: 170,
                    Name:    "foo",
                  },
                  &ast.Ident{
                    NamePos: 171,
                    NameEnd: 174,
                    Name:    "bar",
                  },
                },
              },
            },
          },
          Right: &ast.UnaryExpr{
            OpPos: 177,
            Op:    "-",
            Expr:  &ast.Path{
              Idents: []*ast.Ident{
                &ast.Ident{
                  NamePos: 178,
                  NameEnd: 181,
                  Name:    "foo",
                },
                &ast.Ident{
                  NamePos: 182,
                  NameEnd: 185,
                  Name:    "bar",
                },
              },
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.SelectorExpr{
          Expr: &ast.ScalarSubQuery{
            Lparen: 194,
            Rparen: 207,
            Query:  &ast.Select{
              Select:   195,
              Distinct: false,
              AsStruct: false,
              Results:  []ast.SelectItem{
                &ast.Alias{
                  Expr: &ast.IntLiteral{
                    ValuePos: 202,
                    ValueEnd: 203,
                    Base:     10,
                    Value:    "1",
                  },
                  As: &ast.AsAlias{
                    As:    204,
                    Alias: &ast.Ident{
                      NamePos: 204,
                      NameEnd: 207,
                      Name:    "1",
                    },
                  },
                },
              },
              From:    (*ast.From)(nil),
              Where:   (*ast.Where)(nil),
              GroupBy: (*ast.GroupBy)(nil),
              Having:  (*ast.Having)(nil),
              OrderBy: (*ast.OrderBy)(nil),
              Limit:   (*ast.Limit)(nil),
            },
          },
          Ident: &ast.Ident{
            NamePos: 209,
            NameEnd: 210,
            Name:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.UnaryExpr{
          OpPos: 219,
          Op:    "NOT",
          Expr:  &ast.UnaryExpr{
            OpPos: 223,
            Op:    "NOT",
            Expr:  &ast.BoolLiteral{
              ValuePos: 227,
              Value:    true,
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.IndexExpr{
          Rbrack:  259,
          Ordinal: false,
          Expr:    &ast.ArrayLiteral{
            Array:  0,
            Lbrack: 240,
            Rbrack: 248,
            Type:   nil,
            Values: []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 241,
                ValueEnd: 242,
                Base:     10,
                Value:    "1",
              },
              &ast.IntLiteral{
                ValuePos: 244,
                ValueEnd: 245,
                Base:     10,
                Value:    "2",
              },
              &ast.IntLiteral{
                ValuePos: 247,
                ValueEnd: 248,
                Base:     10,
                Value:    "3",
              },
            },
          },
          Index: &ast.IntLiteral{
            ValuePos: 257,
            ValueEnd: 258,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.IndexExpr{
          Rbrack:  290,
          Ordinal: false,
          Expr:    &ast.ArrayLiteral{
            Array:  0,
            Lbrack: 269,
            Rbrack: 277,
            Type:   nil,
            Values: []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 270,
                ValueEnd: 271,
                Base:     10,
                Value:    "1",
              },
              &ast.IntLiteral{
                ValuePos: 273,
                ValueEnd: 274,
                Base:     10,
                Value:    "2",
              },
              &ast.IntLiteral{
                ValuePos: 276,
                ValueEnd: 277,
                Base:     10,
                Value:    "3",
              },
            },
          },
          Index: &ast.IntLiteral{
            ValuePos: 288,
            ValueEnd: 289,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.IndexExpr{
          Rbrack:  320,
          Ordinal: true,
          Expr:    &ast.ArrayLiteral{
            Array:  0,
            Lbrack: 300,
            Rbrack: 308,
            Type:   nil,
            Values: []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 301,
                ValueEnd: 302,
                Base:     10,
                Value:    "1",
              },
              &ast.IntLiteral{
                ValuePos: 304,
                ValueEnd: 305,
                Base:     10,
                Value:    "2",
              },
              &ast.IntLiteral{
                ValuePos: 307,
                ValueEnd: 308,
                Base:     10,
                Value:    "3",
              },
            },
          },
          Index: &ast.IntLiteral{
            ValuePos: 318,
            ValueEnd: 319,
            Base:     10,
            Value:    "1",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.CaseExpr{
          Case:   330,
          EndPos: 403,
          Expr:   nil,
          Whens:  []*ast.CaseWhen{
            &ast.CaseWhen{
              When: 342,
              Cond: &ast.BinaryExpr{
                Op:   "=",
                Left: &ast.IntLiteral{
                  ValuePos: 347,
                  ValueEnd: 348,
                  Base:     10,
                  Value:    "1",
                },
                Right: &ast.IntLiteral{
                  ValuePos: 351,
                  ValueEnd: 352,
                  Base:     10,
                  Value:    "1",
                },
              },
              Then: &ast.StringLiteral{
                ValuePos: 358,
                ValueEnd: 365,
                Value:    "1 = 1",
              },
            },
          },
          Else: &ast.CaseElse{
            Else: 373,
            Expr: &ast.StringLiteral{
              ValuePos: 389,
              ValueEnd: 395,
              Value:    "else",
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.CaseExpr{
          Case:   415,
          EndPos: 502,
          Expr:   &ast.IntLiteral{
            ValuePos: 420,
            ValueEnd: 421,
            Base:     10,
            Value:    "1",
          },
          Whens: []*ast.CaseWhen{
            &ast.CaseWhen{
              When: 429,
              Cond: &ast.IntLiteral{
                ValuePos: 434,
                ValueEnd: 435,
                Base:     10,
                Value:    "1",
              },
              Then: &ast.StringLiteral{
                ValuePos: 441,
                ValueEnd: 444,
                Value:    "1",
              },
            },
            &ast.CaseWhen{
              When: 452,
              Cond: &ast.IntLiteral{
                ValuePos: 457,
                ValueEnd: 458,
                Base:     10,
                Value:    "2",
              },
              Then: &ast.StringLiteral{
                ValuePos: 464,
                ValueEnd: 467,
                Value:    "2",
              },
            },
          },
          Else: &ast.CaseElse{
            Else: 475,
            Expr: &ast.StringLiteral{
              ValuePos: 487,
              ValueEnd: 494,
              Value:    "other",
            },
          },
        },
      },
      &ast.Alias{
        Expr: &ast.IfExpr{
          If:     0,
          EndPos: 541,
          Expr:   &ast.BinaryExpr{
            Op:   "<",
            Left: &ast.IntLiteral{
              ValuePos: 517,
              ValueEnd: 518,
              Base:     10,
              Value:    "1",
            },
            Right: &ast.IntLiteral{
              ValuePos: 521,
              ValueEnd: 522,
              Base:     10,
              Value:    "2",
            },
          },
          TrueResult: &ast.StringLiteral{
            ValuePos: 524,
            ValueEnd: 530,
            Value:    "true",
          },
          FalseResult: &ast.StringLiteral{
            ValuePos: 532,
            ValueEnd: 539,
            Value:    "false",
          },
        },
        As: &ast.AsAlias{
          As:    -1,
          Alias: &ast.Ident{
            NamePos: 544,
            NameEnd: 550,
            Name:    "result",
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.CallExpr{
          Rparen: 601,
          Func:   &ast.Ident{
            NamePos: 559,
            NameEnd: 567,
            Name:    "date_add",
          },
          Distinct: false,
          Args:     []*ast.Arg{
            &ast.Arg{
              Interval: -1,
              Expr:     &ast.DateLiteral{
                Date:  568,
                Value: &ast.StringLiteral{
                  ValuePos: 573,
                  ValueEnd: 585,
                  Value:    "2019-09-01",
                },
              },
              IntervalUnit: (*ast.Ident)(nil),
            },
            &ast.Arg{
              Interval: 587,
              Expr:     &ast.IntLiteral{
                ValuePos: 596,
                ValueEnd: 597,
                Base:     10,
                Value:    "5",
              },
              IntervalUnit: &ast.Ident{
                NamePos: 598,
                NameEnd: 601,
                Name:    "day",
              },
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.CallExpr{
          Rparen: 673,
          Func:   &ast.Ident{
            NamePos: 611,
            NameEnd: 624,
            Name:    "timestamp_add",
          },
          Distinct: false,
          Args:     []*ast.Arg{
            &ast.Arg{
              Interval: -1,
              Expr:     &ast.TimestampLiteral{
                Timestamp: 625,
                Value:     &ast.StringLiteral{
                  ValuePos: 635,
                  ValueEnd: 656,
                  Value:    "2019-09-01 08:11:22",
                },
              },
              IntervalUnit: (*ast.Ident)(nil),
            },
            &ast.Arg{
              Interval: 658,
              Expr:     &ast.IntLiteral{
                ValuePos: 667,
                ValueEnd: 668,
                Base:     10,
                Value:    "5",
              },
              IntervalUnit: &ast.Ident{
                NamePos: 669,
                NameEnd: 673,
                Name:    "hour",
              },
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.InExpr{
          Not:  false,
          Left: &ast.IntLiteral{
            ValuePos: 683,
            ValueEnd: 684,
            Base:     10,
            Value:    "1",
          },
          Right: &ast.ValuesInCondition{
            Lparen: 688,
            Rparen: 696,
            Exprs:  []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 689,
                ValueEnd: 690,
                Base:     10,
                Value:    "1",
              },
              &ast.IntLiteral{
                ValuePos: 692,
                ValueEnd: 693,
                Base:     10,
                Value:    "2",
              },
              &ast.IntLiteral{
                ValuePos: 695,
                ValueEnd: 696,
                Base:     10,
                Value:    "3",
              },
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.InExpr{
          Not:  false,
          Left: &ast.IntLiteral{
            ValuePos: 706,
            ValueEnd: 707,
            Base:     10,
            Value:    "2",
          },
          Right: &ast.UnnestInCondition{
            Unnest: 711,
            Rparen: 727,
            Expr:   &ast.ArrayLiteral{
              Array:  0,
              Lbrack: 718,
              Rbrack: 726,
              Type:   nil,
              Values: []ast.Expr{
                &ast.IntLiteral{
                  ValuePos: 719,
                  ValueEnd: 720,
                  Base:     10,
                  Value:    "1",
                },
                &ast.IntLiteral{
                  ValuePos: 722,
                  ValueEnd: 723,
                  Base:     10,
                  Value:    "2",
                },
                &ast.IntLiteral{
                  ValuePos: 725,
                  ValueEnd: 726,
                  Base:     10,
                  Value:    "3",
                },
              },
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.InExpr{
          Not:  false,
          Left: &ast.IntLiteral{
            ValuePos: 737,
            ValueEnd: 738,
            Base:     10,
            Value:    "3",
          },
          Right: &ast.SubQueryInCondition{
            Lparen: 742,
            Rparen: 789,
            Query:  &ast.CompoundQuery{
              Op:       "UNION",
              Distinct: false,
              Queries:  []ast.QueryExpr{
                &ast.Select{
                  Select:   743,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []ast.SelectItem{
                    &ast.ExprSelectItem{
                      Expr: &ast.IntLiteral{
                        ValuePos: 750,
                        ValueEnd: 751,
                        Base:     10,
                        Value:    "1",
                      },
                    },
                  },
                  From:    (*ast.From)(nil),
                  Where:   (*ast.Where)(nil),
                  GroupBy: (*ast.GroupBy)(nil),
                  Having:  (*ast.Having)(nil),
                  OrderBy: (*ast.OrderBy)(nil),
                  Limit:   (*ast.Limit)(nil),
                },
                &ast.Select{
                  Select:   762,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []ast.SelectItem{
                    &ast.ExprSelectItem{
                      Expr: &ast.IntLiteral{
                        ValuePos: 769,
                        ValueEnd: 770,
                        Base:     10,
                        Value:    "2",
                      },
                    },
                  },
                  From:    (*ast.From)(nil),
                  Where:   (*ast.Where)(nil),
                  GroupBy: (*ast.GroupBy)(nil),
                  Having:  (*ast.Having)(nil),
                  OrderBy: (*ast.OrderBy)(nil),
                  Limit:   (*ast.Limit)(nil),
                },
                &ast.Select{
                  Select:   781,
                  Distinct: false,
                  AsStruct: false,
                  Results:  []ast.SelectItem{
                    &ast.ExprSelectItem{
                      Expr: &ast.IntLiteral{
                        ValuePos: 788,
                        ValueEnd: 789,
                        Base:     10,
                        Value:    "3",
                      },
                    },
                  },
                  From:    (*ast.From)(nil),
                  Where:   (*ast.Where)(nil),
                  GroupBy: (*ast.GroupBy)(nil),
                  Having:  (*ast.Having)(nil),
                  OrderBy: (*ast.OrderBy)(nil),
                  Limit:   (*ast.Limit)(nil),
                },
              },
              OrderBy: (*ast.OrderBy)(nil),
              Limit:   (*ast.Limit)(nil),
            },
          },
        },
      },
      &ast.ExprSelectItem{
        Expr: &ast.BinaryExpr{
          Op:   "||",
          Left: &ast.ArrayLiteral{
            Array:  0,
            Lbrack: 799,
            Rbrack: 801,
            Type:   nil,
            Values: []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 800,
                ValueEnd: 801,
                Base:     10,
                Value:    "1",
              },
            },
          },
          Right: &ast.ArrayLiteral{
            Array:  0,
            Lbrack: 806,
            Rbrack: 808,
            Type:   nil,
            Values: []ast.Expr{
              &ast.IntLiteral{
                ValuePos: 807,
                ValueEnd: 808,
                Base:     10,
                Value:    "2",
              },
            },
          },
        },
      },
    },
    From:    (*ast.From)(nil),
    Where:   (*ast.Where)(nil),
    GroupBy: (*ast.GroupBy)(nil),
    Having:  (*ast.Having)(nil),
    OrderBy: (*ast.OrderBy)(nil),
    Limit:   (*ast.Limit)(nil),
  },
}

--- SQL
SELECT 1 + 2, 1 - 2, 1 * 2, 2 / 2, +1 + +1, -1 + -1, +1.2, -3.4, ~1 ^ ~1, 1 ^ 2, 2 & 1, 2 | 1, 1 << 2, 2 >> 1, foo.bar * +foo.bar * -foo.bar, (SELECT 1 AS `1`).`1`, NOT NOT TRUE, ARRAY[1, 2, 3][OFFSET(1)], ARRAY[1, 2, 3][OFFSET(1)], ARRAY[1, 2, 3][ORDINAL(1)], CASE WHEN 1 = 1 THEN "1 = 1" ELSE "else" END, CASE 1 WHEN 1 THEN "1" WHEN 2 THEN "2" ELSE "other" END, IF(1 < 2,"true","false") AS result, date_add(DATE "2019-09-01", INTERVAL 5 day), timestamp_add(TIMESTAMP "2019-09-01 08:11:22", INTERVAL 5 hour), 1 IN (1, 2, 3), 2 IN UNNEST(ARRAY[1, 2, 3]), 3 IN (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3), ARRAY[1] || ARRAY[2]
